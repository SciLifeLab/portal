<?php

/**
 * @file
 * Give each group its own system controlled vocabularies.
 */

/**
 * Group field.
 */
define('OG_VOCAB_FIELD', 'og_vocabulary');

/**
 * Implements hook_menu().
 */
function og_vocab_menu() {
  $items = array();

  // Add our own autocomplete callback to pass also the group and
  // vocabulary info.
  $items['og-vocab/autocomplete/single/%entity_object'] = array(
    'load arguments' => array('og_vocab'),
    'title' => 'Entity Reference Autocomplete',
    'page callback' => 'og_vocab_autocomplete_callback',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['og-vocab/autocomplete/tags/%entity_object'] = array(
    'load arguments' => array('og_vocab'),
    'title' => 'Entity Reference Autocomplete',
    'page callback' => 'og_vocab_autocomplete_callback',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function og_vocab_menu_alter(&$callbacks) {
  // Array with menu items, keyed by the ones we need to copy, and the value
  // is the destination menu item.
  $items = array(
    'taxonomy' => array(
      'argument position' => FALSE,
    ),
    'taxonomy/add' => array(
      'argument position' => FALSE,
    ),
    'taxonomy/%taxonomy_vocabulary_machine_name' => array(),
    'taxonomy/%taxonomy_vocabulary_machine_name/list' => array(),
    'taxonomy/%taxonomy_vocabulary_machine_name/edit' => array(),
    'taxonomy/%taxonomy_vocabulary_machine_name/add' => array(),
  );

  $path = drupal_get_path('module', 'taxonomy');
  foreach ($items as $key => $item) {
    $item += array(
      'argument position' => 2,
    );

    $item_path = 'group/%/%/admin/' . $key;
    $original_path = 'admin/structure/' . $key;

    $callbacks[$item_path] = $callbacks[$original_path];

    $callbacks[$item_path]['access callback'] = 'og_vocab_vocabulary_access';
    $access_arguments = array(1, 2, 'administer taxonomy');

    if ($item['argument position']) {
      $argument_position = 3 + $item['argument position'];

      // Replace the last page argument if it is numeric.
      if (!empty($callbacks[$original_path]['page arguments'])) {
        $page_arguments = $callbacks[$original_path]['page arguments'];
        $pop = array_pop($page_arguments);
        if (is_numeric($pop)) {
          $page_arguments[] = $argument_position;
        }
        $callbacks[$item_path]['page arguments'] = $page_arguments;
      }

      // Set the access arguments.
      $access_arguments[] = $argument_position;

      // Set the title argument.
      if (!empty($callbacks[$item_path]['title arguments'])) {
        $callbacks[$item_path]['title arguments'] = array($argument_position);
      }
    }

    $callbacks[$item_path]['access arguments'] = $access_arguments;
    $callbacks[$item_path]['file path'] = $path;
  }

  // Change the access callback for taxonomy/term/%taxonomy_term/edit
  $callbacks['taxonomy/term/%taxonomy_term/edit']['access callback'] = 'og_vocab_taxonomy_term_edit_access';
}


/**
 * Implements hook_og_ui_get_group_admin()
 */
function og_vocab_og_ui_get_group_admin($group_type, $gid) {
  $items = array();
  if (og_user_access($group_type, $gid, 'administer taxonomy')) {
    $items['taxonomy'] = array(
      'title' => t('Taxonomy'),
      'description' => t('Show vocabularies related to this group.'),
      'href' => 'admin/taxonomy',
    );
  }

  return $items;
}


/**
 * Implements hook_og_permissions().
 */
function og_vocab_og_permission() {
  $permissions = array(
    'administer taxonomy' => array(
      'title' => t('Administer vocabularies and terms'),
    ),
    'edit terms' => array(
      'title' => t('Edit terms in group'),
     ),
    'delete terms' => array(
      'title' => t('Delete terms in group'),
     ),
  );
  return $permissions;
}

/**
 * Implements hook_entity_info().
 */
function og_vocab_entity_info() {
  $items['og_vocab'] = array(
    'label' => t('OG vocab'),
    'controller class' => 'EntityAPIController',
    'entity class' => 'OgVocab',
    'base table' => 'og_vocab',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
    ),
    'bundles' => array(
      'og_vocab' => array(
        'label' => t('OG vocab'),
      ),
    ),
    'module' => 'og_vocab',
  );

  return $items;
}

/**
 * Implements hook_migrate_api().
 */
function og_vocab_migrate_api() {
  $api = array(
    'api' => 2,
  );
  return $api;
}

/**
 * Helper to easily create views-queries.
 */
function og_vocab_create_og_vocab($vid, $entity_type, $bundle, $settings = array()) {
  $values = array(
    'vid' => $vid,
    'entity_type' => $entity_type,
    'bundle' => $bundle,
    'settings' => $settings
  );

  $values['settings'] += array(
    'required' => FALSE,
    'widget_type' => 'options_select',
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
  );

  return entity_create('og_vocab', $values);
}

/**
 * Get OG vocabulary settings by vocabulary ID.
 */
function og_vocab_load_og_vocab($vid, $entity_type, $bundle, $defaults = FALSE) {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'og_vocab')
    ->propertyCondition('vid', $vid)
    ->propertyCondition('entity_type', $entity_type)
    ->propertyCondition('bundle', $bundle)
    ->range(0, 1)
    ->execute();

  if (empty($result['og_vocab'])) {
    if (!$defaults) {
      return;
    }
    return og_vocab_create_og_vocab($vid, $entity_type, $bundle);
  }

  $id = key($result['og_vocab']);
  return entity_load_single('og_vocab', $id);
}

/**
 * Implements hook_og_fields_info().
 */
function og_vocab_og_fields_info() {
  $items[OG_VOCAB_FIELD] = array(
    'type' => array('group content'),
    'description' => t('Complex widget to reference taxonomy terms related to accessible groups.'),
    'field' => array(
      'settings' => array(
        'handler' => 'base',
        'target_type' => 'taxonomy_term',
        'handler_settings' => array(
          'target_bundles' => array(),
          'behaviors' => array(
            'og_vocab' => array('status' => TRUE),
          ),
        ),
      ),
      'field_name' => OG_VOCAB_FIELD,
      'type' => 'entityreference',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    ),
    'instance' => array(
      'label' => t('OG vocabulary'),
      'widget' => array(
        'module' => 'og_vocab',
        'settings' => array(),
        'type' => 'og_vocab_complex',
      ),
      'display' => array(
        'default' => array(
          'type' => 'og_vocab',
        ),
      ),
    ),
  );

  return $items;
}

/**
 * Implements hook_field_widget_info().
 */
function og_vocab_field_widget_info() {
  $widgets['og_vocab_complex'] = array(
    'label' => t('OG vocab'),
    'description' => t('Complex widget to reference taxonomy terms related to accessible groups.'),
    'field types' => array('entityreference'),
  );

  return $widgets;
}


/**
 * Implements hook_field_widget_form().
 */
function og_vocab_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $entity_type = $instance['entity_type'];
  $entity = isset($element['#entity']) ? $element['#entity'] : NULL;

  if (!$entity) {
    return;
  }

  if ($field['field_name'] != OG_VOCAB_FIELD) {
    $params = array(
      '@url' => url('admin/config/group/fields'),
      '@label' => $instance['label'],
    );

    form_error($form, t('You must add the OG vocabulary field via <a href="@url">OG field settings</a>, and remove the field @label.', $params));
    return;
  }

  // Cache the processed entity, to make sure we call the widget only once.
  $cache = &drupal_static(__FUNCTION__, array());
  list($id,, $bundle) = entity_extract_ids($entity_type, $entity);

  if (isset($cache[$entity_type . ':' . $id])) {
    return array();
  }
  $cache[$entity_type . ':' . $id] = TRUE;

  if (!$vids = og_vocab_get_accessible_vocabs($entity_type, $entity)) {
    return;
  }

  // Iterate over vocabularies and build each one.
  foreach ($vids as $vid) {
    $og_vocab = og_vocab_load_og_vocab($vid, $entity_type, $bundle);
    $element[$vid] = $og_vocab->getFormElement($entity_type, $entity, $form, $form_state);
  }

  return $element;
}

/**
 * @see _entityreference_autocomplete_tags_validate()
 */
function _og_vocab_autocomplete_tags_validate($element, &$form_state, $form) {
  $value = array();
  // If a value was entered into the autocomplete...
  if (!empty($element['#value'])) {
    $entities = drupal_explode_tags($element['#value']);
    $value = array();
    foreach ($entities as $entity) {
      // Indicate if a value was found, or we need to create a new one.
      $found = FALSE;
      // Take "label (entity id)', match the id from parenthesis.
      if (preg_match("/.+\((\d+)\)/", $entity, $matches)) {
        $value[] = array(
          'target_id' => $matches[1],
        );
        $found = TRUE;
      }
      else {
        // Try to get a match from the input string when the user didn't use the
        // autocomplete but filled in a value manually.
        $field = field_info_field($element['#field_name']);
        $handler = entityreference_get_selection_handler($field);
        // TODO: We can't use validateAutocompleteInput()
        // We might need to create our own Selection plugin.
        //if ($input = $handler->validateAutocompleteInput($entity, $element, $form_state, $form)) {
          //$value[] = array('target_id' => $input);
        //}
      }
      if (!$found) {
        $vocabulary = taxonomy_vocabulary_load($element['#vid']);
        $term = array(
          'target_id' => 'autocreate',
          'vid' => $vocabulary->vid,
          'name' => $entity,
          'vocabulary_machine_name' => $vocabulary->machine_name,
        );
        $value[] = (array)$term;
      }
    }
  }

  // Update the value of this element so the field can validate the product IDs.
  form_set_value($element, $value, $form_state);
}

/**
 * Menu callback: autocomplete the label of an entity.
 *
 * @todo: Get the field in instance settings, based on the group and
 * vocabulary ID.
 *
 * @param $type
 *   The widget type (i.e. 'single' or 'tags').
 * @param $field_name
 *   The name of the entity-reference field.
 * @param $entity_type
 *   The entity type.
 * @param $bundle_name
 *   The bundle name.
 * @param $vid
 *   The vocabulary ID.
 * @param $entity_id
 *   Optional; The entity ID the entity-reference field is attached to.
 *   Defaults to ''.
 * @param $string
 *   The label of the entity to query by.
 */
function og_vocab_autocomplete_callback($type, OgVocab $og_vocab, $entity_id = '', $string = '') {
  $mocked_field = $og_vocab->getMockedField();
  $instance = $mocked_field['instance'];
  $field = $mocked_field['field'];

  $matches = array();

  if (!$field || !$instance || $field['type'] != 'entityreference' || !field_access('edit', $field, $entity_type)) {
    return MENU_ACCESS_DENIED;
  }

  $entity_type = $og_vocab->entity_type;
  $entity = NULL;
  if ($entity_id !== 'NULL') {
    $entity = entity_load_single($entity_type, $entity_id);
    if (!$entity || !entity_access('view', $entity_type, $entity)) {
      return MENU_ACCESS_DENIED;
    }
  }
  $handler = entityreference_get_selection_handler($field, $instance, $entity_type, $entity);

  if ($type == 'tags') {
    // The user enters a comma-separated list of tags. We only autocomplete the last tag.
    $tags_typed = drupal_explode_tags($string);
    $tag_last = drupal_strtolower(array_pop($tags_typed));
    if (!empty($tag_last)) {
      $prefix = count($tags_typed) ? implode(', ', $tags_typed) . ', ' : '';
    }
  }
  else {
    // The user enters a single tag.
    $prefix = '';
    $tag_last = $string;
  }

  if (!empty($tag_last)) {
    // Get an array of matching entities.
    $entity_labels = $handler->getReferencableEntities($tag_last, $instance['widget']['settings']['match_operator'], 10);

    // Loop through the products and convert them into autocomplete output.
    foreach ($entity_labels as $entity_id => $label) {
      $key = "$label ($entity_id)";
      // Strip things like starting/trailing white spaces, line breaks and tags.
      $key = preg_replace('/\s\s+/', ' ', str_replace("\n", '', trim(decode_entities(strip_tags($key)))));
      // Names containing commas or quotes must be wrapped in quotes.
      if (strpos($key, ',') !== FALSE || strpos($key, '"') !== FALSE) {
        $key = '"' . str_replace('"', '""', $key) . '"';
      }
      $matches[$prefix . $key] = '<div class="reference-autocomplete">' . $label . '</div>';
    }
  }

  drupal_json_output($matches);
}

/**
 * Implement hook_field_formatter_info().
 */
function og_vocab_field_formatter_info() {
  return array(
    'og_vocab' => array(
      'label' => t('OG vocabulary'),
      'field types' => array('entityreference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * @todo Allow limiting by group visibilty.
 * @todo Deal with taxonomy_select_nodes() not showing our nodes as they
 * are not inside Taxonomy terms' tables.
 */
function og_vocab_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  global $user;
  if ($field['field_name'] != OG_VOCAB_FIELD) {
    return array('#markup' => t('OG Vocabulary formatter should be used only on "og_vocablary" field.'));
  }

  if (!$items) {
    return;
  }

  $tids = array();
  foreach ($items as $item) {
    $tids[] = $item['target_id'];
  }

  $terms = taxonomy_term_load_multiple($tids);

  // Iterate over each term and group by vocabylary.
  $data = array();
  foreach ($terms as $term) {
    if (empty($data['vocabylary'][$term->vid])) {
      $vocab = taxonomy_vocabulary_load($term->vid);
      $data['vocabylary'][$term->vid] = check_plain($vocab->name);
    }
    $url = entity_uri('taxonomy_term', $term);
    $data['term'][$term->vid][] = l($term->name, $url['path']);
  }

  $element = array();
  foreach ($data['term'] as $vid => $values) {
    $element[0][$vid] = array('#theme' => 'item_list', '#items' => $values, '#title' => $data['vocabylary'][$vid]);
  }


  return $element;
}


/**
 * Save relation between a vocabulary and a group.
 */
function og_vocab_relation_save($vid, $group_type, $gid) {
  if ($og_vocab = og_vocab_relation_get($vid)) {
    if ($og_vocab->group_type != $group_type || $og_vocab->gid != $gid) {
      throw new OgVocabException('Vocabulary ID is already associated with another group.');
    }
    return;
  }

  $og_vocab = array(
    'vid' => $vid,
    'group_type' => $group_type,
    'gid' => $gid,
  );
  drupal_write_record('og_vocab_relation', $og_vocab);
}

/**
 * Get the group related to a vocabulary.
 */
function og_vocab_relation_get($vid) {
  $cache = drupal_static(__FUNCTION__, array());
  if (!isset($cache[$vid])) {
    $cache[$vid] = db_select('og_vocab_relation', 'ogr')
      ->fields('ogr')
      ->condition('vid', $vid)
      ->execute()
      ->fetch();
  }

  return $cache[$vid];
}

function og_vocab_relation_get_by_group($group_type, $gid) {
  return db_select('og_vocab_relation', 'ogr')
    ->fields('ogr')
    ->condition('group_type', $group_type)
    ->condition('gid', $gid)
    ->execute()
    ->fetch();
}

/**
 * Delete a relation between a group and a vocabulary and all its OG-vocabs.
 *
 * @param $entity_type
 *   The entity type is deleted.
 * @param $entity_id
 *   The entity ID that is deleted.
 *
 */
function og_vocab_realtion_delete($entity_type, $entity_id) {
  if ($entity_type == 'taxonomy_vocabulary') {
    if (!$relation = og_vocab_relation_get($entity_id)) {
      return;
    }
    $vid = $entity_id;
  }
  else {
    // Get the vocabylary ID from the group.
    if (!$relation = og_vocab_relation_get_by_group($entity_type, $entity_id)) {
      return;
    }
    $vid = $relation->vid;
  }
  db_delete('og_vocab_relation')
    ->condition('vid', $vid)
    ->execute();

  // Get all OG vocabs related to the entity_type, and delete them.
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'og_vocab')
    ->propertyCondition('vid', $vid)
    ->execute();

  if (empty($result['og_vocab'])) {
    return;
  }

  entity_delete_multiple('og_vocab', array_keys($result['og_vocab']));
}


/**
 * Replacement for core's taxonomy_autocomplete().
 *
 * @see taxonomy_autocomplete()
 */
function og_vocab_taxonomy_autocomplete($vid, $field_name, $tags_typed = '') {
  // If the request has a '/' in the search text, then the menu system will have
  // split it into multiple arguments, recover the intended $tags_typed.
  $args = func_get_args();
  // Shift off the $field_name argument.
  array_shift($args);
  $tags_typed = implode('/', $args);

  // Make sure the field exists and is a taxonomy field.
  if ($field_name != OG_VOCAB_FIELD) {
    // Error string. The JavaScript handler will realize this is not JSON and
    // will display it as debugging information.
    print t('@field_name must be used.', array('@field_name' => OG_VOCAB_FIELD));
    exit;
  }

  // The user enters a comma-separated list of tags. We only autocomplete the last tag.
  $tags_typed = drupal_explode_tags($tags_typed);
  $tag_last = drupal_strtolower(array_pop($tags_typed));

  $matches = array();
  if ($tag_last != '') {

    // Part of the criteria for the query come from the field's own settings.
    $vids = array($vid);

    $query = db_select('taxonomy_term_data', 't');
    $query->addTag('translatable');
    $query->addTag('term_access');

    // Do not select already entered terms.
    if (!empty($tags_typed)) {
      $query->condition('t.name', $tags_typed, 'NOT IN');
    }
    // Select rows that match by term name.
    $tags_return = $query
      ->fields('t', array('tid', 'name'))
      ->condition('t.vid', $vids)
      ->condition('t.name', '%' . db_like($tag_last) . '%', 'LIKE')
      ->range(0, 10)
      ->execute()
      ->fetchAllKeyed();

    $prefix = count($tags_typed) ? drupal_implode_tags($tags_typed) . ', ' : '';
    // TODO: Remove the "og_vocabulary/" (14 chars) from the prefix.
    // $prefix = substr($prefix, 14);

    $term_matches = array();
    foreach ($tags_return as $tid => $name) {
      $n = $name;
      // Term names containing commas or quotes must be wrapped in quotes.
      if (strpos($name, ',') !== FALSE || strpos($name, '"') !== FALSE) {
        $n = '"' . str_replace('"', '""', $name) . '"';
      }
      $term_matches[$prefix . $n] = check_plain($name);
    }
  }

  drupal_json_output($term_matches);
}

function og_vocab_taxonomy_autocomplete_validate($element, &$form_state) {
  // Autocomplete widgets do not send their tids in the form, so we must detect
  // them here and process them independently.
  $value = array();
  if ($tags = $element['#value']) {
    // Collect candidate vocabularies.
    $field = field_widget_field($element, $form_state);
    $field = $element['#og_vocab'];
    $vocabularies = array();
    foreach ($field['settings']['allowed_values'] as $tree) {
      if ($vocabulary = taxonomy_vocabulary_machine_name_load($tree['vocabulary'])) {
        $vocabularies[$vocabulary->vid] = $vocabulary;
      }
    }

    // Translate term names into actual terms.
    $typed_terms = drupal_explode_tags($tags);
    foreach ($typed_terms as $typed_term) {
      // See if the term exists in the chosen vocabulary and return the tid;
      // otherwise, create a new 'autocreate' term for insert/update.
      if ($possibilities = taxonomy_term_load_multiple(array(), array('name' => trim($typed_term), 'vid' => array_keys($vocabularies)))) {
        $term = array_pop($possibilities);
      }
      else {
        $vocabulary = reset($vocabularies);
        $term = array(
          'tid' => 'autocreate',
          'vid' => $vocabulary->vid,
          'name' => $typed_term,
          'vocabulary_machine_name' => $vocabulary->machine_name,
        );
      }
      $value[] = (array)$term;
    }
  }

  form_set_value($element, $value, $form_state);
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function og_vocab_ctools_plugin_directory($module, $plugin) {
  if ($module == 'entityreference') {
    return "plugins/$plugin";
  }
}

//////////////////////////////////////////////////////////////////////////
/// Form alters


/**
 * Implements hook_query_TAG_alter().
 */
function og_vocab_query_taxonomy_vocabulary_load_multiple_alter(QueryAlterableInterface $query) {
  $cache = &drupal_static(__FUNCTION__, FALSE);
  if ($cache) {
    // Prevent recursion.
    return;
  }
  $cache = TRUE;

  if (!$context = og_vocab_is_group_admin_context()) {
    return;
  }

  $group_type = $context['group_type'];
  $gid = $context['gid'];

  $query->innerJoin('og_vocab_relation', 'ogr', 'ogr.vid = base.vid');
  $query
    ->condition('ogr.group_type', $group_type)
    ->condition('ogr.gid', $gid);
}

/**
 * Implements hook_form_FORM-ID_alter().
 *
 * Vocabularies overview.
 */
function og_vocab_form_taxonomy_overview_vocabularies_alter(&$form, $form_state) {
  if (!$context = og_vocab_is_group_admin_context()) {
    return;
  }

  $group_type = $context['group_type'];
  $gid = $context['gid'];

  $path_prefix = "group/$group_type/$gid/admin";

  foreach (array_keys($form) as $key) {
    if (!is_numeric($key)) {
      continue;
    }

    $ops = array('edit', 'list', 'add');

    foreach ($ops as $op) {
      $form[$key][$op]['#href'] = $path_prefix . str_replace('admin/structure', '', $form[$key][$op]['#href']);
    }
  }
}

/**
 * Preprocess table; Change the "Empty" link to redirect to correct page.
 */
function og_vocab_preprocess_table(&$variables) {
  if (!$context = og_vocab_is_group_admin_context()) {
    return;
  }

  $item = menu_get_item();

  $variables['empty'] = t('No vocabularies available. <a href="@link">Add vocabulary</a>.', array('@link' => url($item['href'] . '/add')));
}


/**
 * Implements hook_form_FORM-ID_alter().
 *
 * 1) Add group id to the vocabulary if it's a group context.
 * 2) Add own submit handler.
 *
 * @see og_vocab_form_taxonomy_form_vocabulary_submit().
 */
function og_vocab_form_taxonomy_form_vocabulary_alter(&$form, $form_state) {
  if (!empty($form_state['triggering_element']['#parents'][0]) && $form_state['triggering_element']['#parents'][0] == 'delete') {
    // This is delete confirmation page.
    return;
  }

  if (!$context = og_vocab_is_group_admin_context()) {
    return;
  }

  $group_type = $context['group_type'];
  $gid = $context['gid'];

  $group = entity_load_single($group_type, $gid);
  list(,, $group_bundle) = entity_extract_ids($group_type, $group);

  $form['og_vocab_relation'] = array(
    '#type' => 'value',
    '#value' => array('group_type' => $group_type, 'gid' => $gid),
  );

  $form['#validate'][] = 'og_vocab_form_taxonomy_form_vocabulary_validate';

  // Add widget settings per group content. We discover all the group
  // content that reference this group type.
  $entity_info = entity_get_info();

  $options = array();
  foreach (og_get_all_group_content_bundle() as $entity_type => $bundles) {
    if ($entity_type == 'user') {
      // Adding terms to the user is probably not the use case, so skip
      // it.
      continue;
    }
    foreach ($bundles as $bundle => $bundle_label) {
      foreach (og_get_group_audience_fields($entity_type, $bundle, FALSE) as $field_name => $field_label) {
        $field = field_info_field($field_name);
        if (empty($field['settings']['handler_settings']['target_bundles']) || in_array($group_bundle, $field['settings']['handler_settings']['target_bundles'])) {
          $options[$entity_type][$bundle] = $entity_info[$entity_type]['label'] . ' - ' . $bundle_label;
        }
      }
    }
  }

  if (!$options) {
    $form['og_vocab'] = array(
      '#markup' => t('There are no group contents referencing this group type.'),
    );
    return;
  }

  $form['og_vocab'] = array(
    '#tree' => TRUE,
  );

  $vocabulary = $form['#vocabulary'];
  $vid = !empty($vocabulary->vid) ? $vocabulary->vid : 0;

  foreach ($options as $entity_type => $values) {
    foreach ($values as $bundle => $name) {
      // Load the OG-vocab record if exists, or a default one.
      $form['og_vocab']["$entity_type:$bundle"] = array(
        '#type' => 'fieldset',
        '#title' => check_plain($name),
      );

      // Load an existing OG-vocab, or get default values.
      $og_vocab = og_vocab_load_og_vocab($vid, $entity_type, $bundle, TRUE);

      $form['og_vocab']["$entity_type:$bundle"]['entity'] = array(
        '#type' => 'value',
        '#value' => $og_vocab,
      );

      // Get all the entity reference widget types, except OG-vocab's.
      $form['og_vocab']["$entity_type:$bundle"]['status'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable'),
        '#description' => t('Show term reference in @name add and edit form', array('@name' => $name)),
        '#default_value' => empty($og_vocab->is_new),
      );

      module_load_include('inc', 'field_ui', 'field_ui.admin');
      $widget_types = field_ui_widget_type_options('entityreference');
      unset($widget_types['og_vocab_complex']);

      $element_name = "og_vocab[$entity_type:$bundle][status]";
      $states = array(
        '#states' => array(
          'visible' => array(
            ':input[name="' . $element_name . '"]' => array('checked' => TRUE),
          ),
        ),
      );

      $form['og_vocab']["$entity_type:$bundle"]['widget_type'] = array(
        '#type' => 'select',
        '#title' => t('Widget type'),
        '#required' => TRUE,
        '#options' => $widget_types,
        '#default_value' => $og_vocab->settings['widget_type'],
        '#description' => t('The type of form element you would like to present to the user when creating this field in the %type type.', array('%type' => $bundle_label)),
      ) + $states;

      $form['og_vocab']["$entity_type:$bundle"]['required'] = array(
        '#type' => 'checkbox',
        '#title' => t('Required field'),
        '#default_value' => $og_vocab->settings['required'],
      ) + $states;

      $form['og_vocab']["$entity_type:$bundle"]['cardinality'] = array(
        '#type' => 'select',
        '#title' => t('Number of values'),
        '#options' => array(FIELD_CARDINALITY_UNLIMITED => t('Unlimited')) + drupal_map_assoc(range(1, 10)),
        '#default_value' => $og_vocab->settings['cardinality'],
        '#description' => t('Maximum number of values users can enter for this field.'),
      ) + $states;
    }
  }
  $form['#submit'][] = 'og_vocab_form_taxonomy_form_vocabulary_submit';
}

/**
 * Validate handler; Redirect back to taxonomy overview.
 */
function og_vocab_form_taxonomy_form_vocabulary_validate(&$form, $form_state) {
  // TODO: Why do we need to set the $_GET['destination']?
  $group_type = $form_state['values']['og_vocab_relation']['group_type'];
  $gid = $form_state['values']['og_vocab_relation']['gid'];
  $_GET['destination'] = $form_state['redirect'] = "group/$group_type/$gid/admin/taxonomy";
}

/**
 * Submit handler; Save the OG-vocab record.
 */
function og_vocab_form_taxonomy_form_vocabulary_submit(&$form, $form_state) {
  $vocab = $form_state['vocabulary'];
  $group_type = $form_state['values']['og_vocab_relation']['group_type'];
  $gid = $form_state['values']['og_vocab_relation']['gid'];

  // Save the relation.
  og_vocab_relation_save($vocab->vid, $group_type, $gid);

  foreach ($form_state['values']['og_vocab'] as $key => $value) {
    $og_vocab = $form_state['values']['og_vocab'][$key]['entity'];
    $og_vocab->vid = $vocab->vid;

    // Check if status was disable, and if so delete the og-vocab.
    if (!$value['status'] && empty($og_vocab->is_new)) {
      $og_vocab->delete();
    }
    elseif ($value['status']) {
      // Rebuild the settings.
      $settings = array(
        'required',
        'widget_type',
        'cardinality',
      );
      foreach ($settings as $setting) {
        $og_vocab->settings[$setting] = $form_state['values']['og_vocab'][$key][$setting];
      }
      $og_vocab->save();
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Term edit page.
 */
function og_vocab_form_taxonomy_form_term_alter(&$form, $form_state) {
  $vocab = $form['#vocabulary'];
  if (!$relation = og_vocab_relation_get($vocab->vid)) {
    return;
  }
  $form['actions']['delete']['#access'] = og_user_access($relation->group_type, $relation->gid, 'delete terms') || og_user_access($relation->group_type, $relation->gid, 'administer taxonomy');
}

/**
 * API function; Get all the vocabs a user may access.
 *
 * This will include the global vocabualries (i.e. ones that aren't associated
 * with a group), and the ones that are associated with a group the user is a
 * member.
 *
 * @todo: Take care of administrators, we need to show ALL widgets?
 *
 * @param $account
 *   User object.
 * @return
 *   An array with the vocabulary IDs or an empty array if no vocabulary
 *   was found.
 */
function og_vocab_get_accessible_vocabs($entity_type = NULL, $entity = NULL, $account = NULL) {
  if (empty($account)) {
    global $user;
    $account = clone $user;
  }
  $field = field_info_field(OG_VOCAB_FIELD);
  $use_context = !empty($field['settings']['handler_settings']['behaviors']['og_vocab']['use_context']) ? $field['settings']['handler_settings']['behaviors']['og_vocab']['use_context'] : 'yes';
  $context = FALSE;
  $gids = array();

  if (in_array($use_context, array('force', 'yes')) && module_exists('og_context') && $context = og_context()) {
    $gids[$context['group_type']][$context['gid']] = array($context['gid']);
  }

  if (in_array($use_context, array('yes', 'no')) && !$gids) {
    $gids = og_get_entity_groups('user', $account);
  }

  if (!$gids) {
    return;
  }

  list(,, $bundle) = entity_extract_ids($entity_type, $entity);

  $query = db_select('og_vocab_relation', 'ogr');
  $query->fields('ogr', array('vid'));

  // Prepare a query according to the group types. In the common case that
  // the user has only a single group type (e.g. node) we can make a simpler
  // query.
  if (count($gids) == 1) {
    $group_type = key($gids);
    $query
      ->condition('group_type', $group_type)
      ->condition('gid', $gids[$group_type], 'IN');
  }
  else {
    // TODO
  }

  if (!empty($entity_type) && !empty($bundle)) {
    // Join with the OG-vocab.
    $query->innerJoin('og_vocab', 'ogv', 'ogr.vid = ogv.vid');
    $query
      ->condition('ogv.entity_type', $entity_type)
      ->condition('ogv.bundle', $bundle);
  }

  $result = $query
    ->execute()
    ->fetchAllAssoc('vid');

  return !empty($result) ? array_keys($result) : FALSE;
}

/**
 * Access function to determine if a user has access to the menu item.
 *
 * @param $node
 *   The group node.
 * @param $perm
 *   The permission to check is user has.
 * @param $vid
 *   Optional; The vocabulary ID.
 *
 * @return
 *   TRUE if user has access to the menu item.
 */
function og_vocab_vocabulary_access($entity_type, $entity_id, $perm, $vocabulary = NULL) {
  if (!$entity = entity_load_single($entity_type,$entity_id)) {
    return FALSE;
  }

  if ($vocabulary) {
    // Make sure vocabulary ID belongs to the group node.
    if (!$og_vocab = og_vocab_relation_get($vocabulary->vid)) {
      return FALSE;
    }

    // Check the group matches our passed group.
    if ($og_vocab->group_type != $entity_type || $og_vocab->gid != $entity_id) {
      return FALSE;
    }
  }

  return og_user_access($entity_type, $entity_id, $perm);
}

/**
 * Return edit access for a given term.
 */
function og_vocab_taxonomy_term_edit_access($term) {
  if ($og_vocab = og_vocab_relation_get($term->vid)) {
    return og_user_access($og_vocab->group_type, $og_vocab->gid, 'edit terms') || og_user_access($og_vocab->group_type, $og_vocab->gid, 'administer taxonomy');
  }
  return taxonomy_term_edit_access($term);
}

/**
 * Implements hook_entity_delete().
 */
function og_vocab_entity_delete($entity, $entity_type) {
  if ($entity_type == 'taxonomy_vocabulary') {
    og_vocab_realtion_delete($entity_type, $entity->vid);
  }
  elseif(og_is_group($entity_type, $entity)) {
    list($id) = entity_extract_ids($entity_type, $entity);
    og_vocab_realtion_delete($entity_type, $id);
  }
}

/**
 * Check if a given page is inside a group admin context.
 *
 * We determine the context by the menu item path, and if it doesn't exist
 * and OG context module is enabled, we try to check if we have a group
 * context avialable.
 *
 * @return
 *   Array keyed with the group type and group ID, if context found.
 */
function og_vocab_is_group_admin_context() {
  $item = menu_get_item();
  if (strpos($item['path'], 'group/') === 0 && !empty($item['map'][2])) {
    return array('group_type' => $item['map'][1], 'gid' => $item['map'][2]);
  }
}


/**
 * Implements hook_modules_enabled().
 *
 * Register dynamic migrate plugins for upgrading from OG6.
 */
function og_vocab_modules_enabled($modules) {
  if (!variable_get('og_vocab_7000', FALSE)) {
    return;
  }

  if (!in_array('migrate', $modules) && !module_exists('migrate')) {
    return;
  }

  foreach (node_type_get_names() as $bundle => $value) {
    // Register a dynamic migration.
    Migration::registerMigration('OgVocabMigrate', 'OgVocabMigrate' . ucfirst($bundle), array('bundle' => $bundle));
  }
}
